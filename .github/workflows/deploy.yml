name: Deploy to S3 and CloudFront

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Install AWS CLI
    - name: Install AWS CLI
      run: |
        if ! command -v aws &> /dev/null; then
          echo "AWS CLI not found. Installing..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
        else
          echo "AWS CLI is already installed."
        fi

    # Step 3: Configure AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    # Step 4: Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    # Step 5: Terraform Init
    - name: Terraform Init
      run: terraform init
      working-directory: terraform/

    # Step 6: Terraform Plan
    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: terraform/

    # Step 7: Terraform Apply
    - name: Terraform Apply
      id: terraform_apply
      run: terraform apply -auto-approve tfplan
      working-directory: terraform/

    # Step 8: Retrieve CloudFront Distribution ID
    - name: Retrieve CloudFront Distribution ID
      id: get_cf_id
      run: |
        echo "Fetching CloudFront Distribution ID from Terraform outputs..."
        CF_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
        if [ -z "$CF_ID" ]; then
          echo "Error: CloudFront Distribution ID not found!"
          exit 1
        fi
        echo "CLOUDFRONT_DISTRIBUTION_ID=$CF_ID" >> $GITHUB_ENV
        echo "Retrieved CloudFront Distribution ID: $CF_ID"

    # Step 9: Sync Website Files to S3
    - name: Upload Website Files
      run: |
        aws s3 sync ./public s3://seehmat.com-website \
          --delete \
          --acl private
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Step 10: Invalidate CloudFront Cache
    - name: Invalidate CloudFront Cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
